//go:build wasip1

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin 0.9.0
// 	protoc               v6.30.2
// source: api/api.proto

package api

import (
	context "context"
	wasm "github.com/knqyf263/go-plugin/wasm"
)

const LifecycleManagementPluginAPIVersion = 1

//go:wasmexport lifecycle_management_api_version
func _lifecycle_management_api_version() uint64 {
	return LifecycleManagementPluginAPIVersion
}

var lifecycleManagement LifecycleManagement

func RegisterLifecycleManagement(p LifecycleManagement) {
	lifecycleManagement = p
}

//go:wasmexport lifecycle_management_on_init
func _lifecycle_management_on_init(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(InitRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := lifecycleManagement.OnInit(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

const WebSocketCallbackPluginAPIVersion = 1

//go:wasmexport web_socket_callback_api_version
func _web_socket_callback_api_version() uint64 {
	return WebSocketCallbackPluginAPIVersion
}

var webSocketCallback WebSocketCallback

func RegisterWebSocketCallback(p WebSocketCallback) {
	webSocketCallback = p
}

//go:wasmexport web_socket_callback_on_text_message
func _web_socket_callback_on_text_message(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(OnTextMessageRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := webSocketCallback.OnTextMessage(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport web_socket_callback_on_binary_message
func _web_socket_callback_on_binary_message(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(OnBinaryMessageRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := webSocketCallback.OnBinaryMessage(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport web_socket_callback_on_error
func _web_socket_callback_on_error(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(OnErrorRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := webSocketCallback.OnError(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport web_socket_callback_on_close
func _web_socket_callback_on_close(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(OnCloseRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := webSocketCallback.OnClose(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

const IntegrationTestPluginAPIVersion = 1

//go:wasmexport integration_test_api_version
func _integration_test_api_version() uint64 {
	return IntegrationTestPluginAPIVersion
}

var integrationTest IntegrationTest

func RegisterIntegrationTest(p IntegrationTest) {
	integrationTest = p
}

//go:wasmexport integration_test_send_to
func _integration_test_send_to(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(TestSendToRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := integrationTest.SendTo(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}
